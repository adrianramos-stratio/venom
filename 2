use actix::{Actor, Context, Handler, Supervised, Message};
use tracing::info;
use uuid::Uuid;

use crate::application::aggregate::component::cmd::AssignSbomToComponent;
use crate::application::aggregate::component::supervisor::ComponentSupervisor;
use crate::application::service::sbom_generator::SbomGenerator;
use crate::domain::component::event::ComponentEvent;
use crate::domain::component::id::ComponentId;

/// Saga actor responsible for reacting to component registration events
pub struct SbomGenerationSaga<EB>
where
    EB: crate::application::shared::event::bus::EventBus + Send + Sync + 'static,
{
    pub supervisor: actix::Addr<ComponentSupervisor<EB>>,
    pub generator: SbomGenerator,
}

impl<EB> Actor for SbomGenerationSaga<EB>
where
    EB: EventBus + Send + Sync + 'static,
{
    type Context = Context<Self>;
}

/// Message wrapper for reacting to domain component events
#[derive(Message, Debug)]
#[rtype(result = "()")]
pub struct HandleComponentRegistered(pub ComponentEvent);

impl<EB> Handler<HandleComponentRegistered> for SbomGenerationSaga<EB>
where
    EB: EventBus + Send + Sync + 'static,
{
    type Result = ();

    fn handle(&mut self, msg: HandleComponentRegistered, _: &mut Context<Self>) {
        tracing::info!("Handling msg {msg:?}");

        if let ComponentEvent::ComponentRegistered { component_id } = msg.0 {
            match self.generator.generate(&component_id) {
                Ok(sbom) => {
                    tracing::info!("SBOM generated successfully");
                    self.supervisor.do_send(AssignSbomToComponent {
                        id: component_id,
                        sbom,
                    });
                }
                Err(err) => {
                    tracing::error!(
                        "SBOM generation failed for component {}: {}",
                        component_id,
                        err
                    );
                }
            }
        }
    }
}

impl<EB> Supervised for SbomGenerationSaga<EB>
where
    EB: EventBus + Send + Sync + 'static,
{
    fn restarting(&mut self, _ctx: &mut <Self as Actor>::Context) {
        tracing::warn!("SbomGenerationSaga is restarting");
    }
}
